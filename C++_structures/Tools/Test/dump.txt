		virtual int counterList() = 0;
		virtual void emptyList() = 0;
		virtual void exchange(int pst_1, int pst_2) = 0;
		virtual void ListInsert(T elm, int pst) = 0;
		virtual void ListInsert(T elm) = 0;
		virtual void ListDelete(T elm ,int pst) = 0;
		virtual void ListDelete(T elm) = 0;
		virtual T get(int pst) = 0;
		virtual int find(T elm) = 0;
		virtual T next(int pst) = 0;  
		virtual T previous(int pst) = 0;
		virtual T myr() = 0;  
		virtual T min() = 0;
		virtual T rand() = 0;
		virtual T rand(int i, int j) = 0;
		virtual void printList() = 0;

		/* IMPLEMENTADOS */
		void mergeSort(List<int>* MyList){}
		void quickSort(List<int>* MyList){
			int j = 0, k = MyList->counterList();
			int pivot = MyList->get(MyList->counterList()/2);
			for (int i = 0; i < MyList->counterList(); i ++){
				if (MyList->get(i)< pivot){
					MyList->exchange(j,i);
					j+=1;
				}else{
					MyList->exchange(k,i);
					k -=1;
				}
			}
		}
		void selectionSort(List<int>* MyList){
			for (int i = 0 ; i < (MyList->counterList()-1); i++){
				int minor = MyList->get(i),min_index = i;
				for (int j = 0 ; j < (MyList->counterList()-1); j++){
					if ((MyList->get((MyList->counterList()-1)-j)) < MyList->get(i) ){
						minor = MyList->get((MyList->counterList()-1)-j);
						min_index = ((MyList->counterList()-1)-j);
					}
				}
				MyList->exchange(min_index, i);
			}	
		}
		bool linealSearch(List<int>* MyList, int i){
			for (int j = 0 ; j < MyList->counterList(); j++){
				if (MyList->get(j) == i ){
					return true;
				}
			}
		}
		bool binarySearch(List<int>* MyList, int i){
			int inferior = 0, superior = (MyList->counterList()-1);
			while (inferior <= superior){
				int middle = ((inferior-superior)/2);
				if (MyList->get(middle) < i){
					inferior = middle -1;
				}else if(MyList->get(middle) > i){
					superior = middle +1;
				}else {
					return true;
				}
			}
			return false;
		}
		int fibonacciNum(int k){
			if (k == 0 || k == 0){
				return 1;
			}else{
				fibonacciNum(fibonacciNum(k-1) + fibonacciNum(k+1));
			}
		}

		
		void fibonacciArray(int k){
		}
		void fibonacciSearch(List<int>* MyList, int i){

		}


        		void exchange(int i , int j){
			int temp = this->Array[i];
			this->Array[i] = this->Array[j];
			this->Array[j] = temp;
		}

		int counterList(){
			return this->index;	
		}

		void emptyList(){
			for (int i = 0 ; i < this->index ; i ++){
				this->Array[i] = 0;
			}
		};

		void ListInsert(T n, int i){
			ArrayList* temp;
			temp = this;
			this->Array = new T[this->index+1];
			for (int j = 0 ; j < this->index+1 ; j ++){
				if (j = i){
					this->Array[j] = n;
				}else{
					this->Array[j] = temp->Array[i];
				}
			}		
		};
		void ListInsert(T n){
			ArrayList* temp;
			temp = this;
			this->Array = new T[this->index+1];
			for (int j = 0 ; j < this->index ; j ++){
					this->Array[j] = temp->Array[j];
			}
			this->Array[this->index+1]=n;
		};

		void ListDelete(T n ,int i){
			ArrayList* temp;
			temp = this;
			bool found = false;
			if (this->Array[i] == n){
				found = true;
			}else{
				return;
			}
			if (found == true){
				this->Array = new T[this->index-1];
				for (int j = 0 ; j < this->index-1 ; j ++){
					if (j != i){
						this->Array[j] = temp->Array[j];
					}
				}
			}	
		};
		void ListDelete(T n){
			ArrayList* temp;
			temp = this;
			bool found = false;
			int k = 0;
			for (int j = 0 ; j < this->index ; j ++){
				if (this->Array[j] == n){
					k = j;
					found = true;
				}
				else {
					return;
				}
			}
			if (found == true){
				this->Array = new T[this->index-1];
				for (int j = 0 ; j < this->index-1 ; j ++){
					if (j != k){
						this->Array[j] = temp->Array[j];
					}
				}
			}	
		};

		T get(int i){
			return this->Array[i];
		}

		int find(T n){
			for (int i = 0 ; i < index ; i ++){
				if(this->Array[i] == n){
					return n;
				}
			}
		};

		T next(int i){
			return this->Array[i+1];
		};
		T previous(int i){
			return this->Array[i-1];
		};

		T myr(){
			int mayor = this->Array[0];
			for (int i = 0; i < this->counterList() ; i ++){
				if (this->Array[i]>mayor){
					mayor = this->Array[i];
				}
			}
			return mayor;
		};

		T min(){
			int minor = this->Array[0];
			for (int i = 0; i < this->counterList() ; i ++){
				if (this->Array[i]<minor){
					minor = this->Array[i];
				}
			}
			return minor;
		};

		void printList(){
			cout << "[";
			for (int i = 0 ; i < index ; i ++){
					cout <<this->Array[i];
					if (i != index-1){
						cout << ",";
					}
			}
			cout << "]" << endl;
		};

	void exchange(int i, int j){
		int k = 0, m;
		DoublePosition<T>* loop = this->content;
		DoublePosition<T>* temp_1;
		DoublePosition<T>* temp_2;
		while ( loop != NULL){			
			if( k == i){
				temp_1 = loop;
				m = k;
			}
			if ( k == j){
				temp_2 = loop;
				loop->content = temp_1->content;
			}
			loop = loop->next;
			k+=1;
		}
		loop = this->content;
		while ( loop != NULL){
			if( k == m){
				loop->content = temp_2->content;
				m = k;
			}
			k+=1;
		}
	}

	int counterList(){
		int i = 0;
		DoublePosition<T>* loop = this->content;
		while(loop != NULL){
			loop = loop->next;
			i += 1;
		}
		return i;	
	}

	
	void emptyList(){
		int i = 0;
		DoublePosition<T>* loop = this->content;
		while(loop != NULL){
			loop->content = 0;
			loop = loop->next;
			i += 1;
		}
	}

	void ListInsert(T n, int i){
		int j = 0;
		DoublePosition<T>* loop = this->content;
		DoublePosition<T>* temp_1;
		while(loop!=NULL){
			if (j == i){
				loop->next = new DoublePosition<T>();
				loop->content = n;
				loop->next->next = temp_1->next;
			}
			loop = loop->next;
			temp_1 = loop;
			j += 1;
		}
	}
	void ListInsert(T n){
		int j = 0;
		DoublePosition<T>* loop = this->content;
		while(loop!=NULL){
			if (j == this->counterList()){
				loop->next = new DoublePosition<T>();
				loop->content = n;
				loop->next->next = NULL;
			}
			loop = loop->next;
			j += 1;
		}
	}

	
	void ListDelete(T n ,int i){
		int j = 0;
		DoublePosition<T>* loop = this->content;
		DoublePosition<T>* temp_1;
		DoublePosition<T>* temp_2;
		while(loop!=NULL){
			if (j == i){
				if ( this->get(i) == n){
					temp_1->next = temp_2->next;
					temp_2->previous = temp_1;
					loop = NULL;
					break;
				}
			}
			temp_1 = loop;
			loop = loop->next;
			temp_2 = loop;
			j += 1;
		}
	}
	
	void ListDelete(T n){
		int j = 0;
		DoublePosition<T>* loop = this->content;
		while(loop!=NULL){
			if (j == this->counterList()){
				if ( this->get(j) == n){
					loop = NULL;
					break;
				}
			}
			j += 1;
		}
	}

	T get(int i){
		int j = 0;
		DoublePosition<T>* loop = this->content;
		while(loop != NULL){
			if (j = i){
				return loop->content;
			};
			loop = loop->next;
			j += 1;
		}
	}
	int find(T n){
		int i = 0;
		DoublePosition<T>* loop = this->content;
		while(loop != NULL){
			if (loop->content = n){
				return i;
			};
			loop = loop->next;
			i += 1;
		}
	}
	T next(int i){
		int j = 0;
		DoublePosition<T>* loop = this->content;
		while(loop != NULL){
			if (j = i+1){
				return loop->content;
			};
			loop = loop->next;
			j += 1;
		}
	}
	T previous(int i){
		int j = 0;
		DoublePosition<T>* loop = this->content;
		while(loop != NULL){
			if (j = i-1){
				return loop->content;
			};
			loop = loop->next;
			j += 1;
		}		
	}

	int myr(){
		DoublePosition<int>* loop = this->content;
		int mayor = this->content->content;
		while(loop != NULL){
			if (mayor<loop->next->content){
				mayor = loop->next->content;
			}
			loop = loop->next;
		}
		return mayor;
	};

	int min(){
		DoublePosition<int>* loop = this->content;
		int minor = this->content->content;
		while(loop != NULL){
			if (minor>loop->next->content){
				minor = loop->next->content;
			}
			loop = loop->next;
		}
		return minor;
	};
 	
	T rand(){
		random_device dev;
		mt19937 rng(dev());
		uniform_int_distribution<mt19937::result_type> dist6(0,this->counterList());
		int j = 0;
		SinglePosition<SingleElement>* loop = this->content;
		while(loop != NULL){
			if (j = dist6(rng)){
				return loop->content;
			};
			loop = loop->next;
			j += 1;
		}
	};

	T rand(int i, int j) {
		random_device dev;
		mt19937 rng(dev());
		uniform_int_distribution<mt19937::result_type> dist6(i,(j%this->counterList()+1));
		int j = 0;
		SinglePosition<SingleElement>* loop = this->content;
		while(loop != NULL){
			if (j = dist6(rng)){
				return loop->content;
			};
			loop = loop->next;
			j += 1;
		}
	};

	void printList(){
		DoublePosition<T>* loop = this->content;
		cout << "[";
		int i = 1;
		while ( loop != NULL){
			cout << loop->content;
			if ( i == this->counterList()){
				break;		
			}else {
				cout << ",";
			}
			loop = loop->next;
			i += 1;
		}
		cout << "]" << endl;
		i += 1;
	}
	DoubleLinkedList(){
		int i = 1, in_ext;
		T campo;
		this->content = new DoublePosition<T>;
		cout << "Ingrese la extensiÃ³n de la lista doble enlazada: ";
		cin >> in_ext;
		DoublePosition<T>* loop;
		DoublePosition<T>* temp;
		do{
			if ( i == 1) {
				cout << "Ingrese el contenido de el campo "<< i <<" : ";
				cin >> campo;
				this->content->previous = NULL;
				this->content->content = campo;
				if (in_ext == 1){			
					this->content->next = NULL;
					break;
				}else{
					this->content->next = new DoublePosition<T>();
					loop = this->content->next;
					loop->previous = this->content;
				}
			} else {
				cout << "Ingrese el contenido de el campo "<< i <<" : ";
				cin >> campo;
				loop->content = campo;
				if (i==in_ext){			
					loop->next = NULL;
					break;
				}else{ 
					temp = loop;
					loop->next = new DoublePosition<T>();
					loop = loop->next;
					loop->previous = temp;
				}
			}
			i += 1;
		}while ( loop != NULL);
	};
	DoubleLinkedList(T i){
		this->content->content = i;
		this->content->previous = NULL;
		this->content->next = NULL;
	};
	~DoubleLinkedList(){
		this->emptyList();
		this->content->previous = NULL;
		this->content->next = NULL;
		this->content = NULL;
	};
	DoubleLinkedList(const DoubleLinkedList &cpy){
		DoublePosition<T>* loop = this->content;
		DoublePosition<T>* temp_1 = cpy->content;
		cpy->content = loop;
		temp1 = cpy->content;
		while (loop =! NULL){
			temp_1->next = loop->next;
			temp_1->previous = loop->previous:
			temp_1->content = loop->content; 
			temp_1 = loop->next;
			loop = loop->next;
		}
	};

		DoubleLinkedList(){
		int i = 1, in_ext;
		T campo;
		this->content = new DoublePosition<T>;
		cout << "Ingrese la extensiÃ³n de la lista doble enlazada: ";
		cin >> in_ext;
		DoublePosition<T>* loop;
		DoublePosition<T>* temp;
		do{
			if ( i == 1) {
				cout << "Ingrese el contenido de el campo "<< i <<" : ";
				cin >> campo;
				this->content->previous = NULL;
				this->content->content = campo;
				if (in_ext == 1){			
					this->content->next = NULL;
					break;
				}else{
					this->content->next = new DoublePosition<T>();
					loop = this->content->next;
					loop->previous = this->content;
				}
			} else {
				cout << "Ingrese el contenido de el campo "<< i <<" : ";
				cin >> campo;
				loop->content = campo;
				if (i==in_ext){			
					loop->next = NULL;
					break;
				}else{ 
					temp = loop;
					loop->next = new DoublePosition<T>();
					loop = loop->next;
					loop->previous = temp;
				}
			}
			i += 1;
		}while ( loop != NULL);
	};
	DoubleLinkedList(T i){
		this->content->content = i;
		this->content->previous = NULL;
		this->content->next = NULL;
	};
	~DoubleLinkedList(){
		this->emptyList();
		this->content->previous = NULL;
		this->content->next = NULL;
		this->content = NULL;
	};
	DoubleLinkedList(const DoubleLinkedList &cpy){
		DoublePosition<T>* loop = this->content;
		DoublePosition<T>* temp_1 = cpy->content;
		cpy->content = loop;
		temp1 = cpy->content;
		while (loop =! NULL){
			temp_1->next = loop->next;
			temp_1->previous = loop->previous:
			temp_1->content = loop->content; 
			temp_1 = loop->next;
			loop = loop->next;
		}
	};
		DoubleLinkedList(){
		int i = 1, in_ext;
		T campo;
		this->content = new DoublePosition<T>;
		cout << "Ingrese la extensiÃ³n de la lista doble enlazada: ";
		cin >> in_ext;
		DoublePosition<T>* loop;
		DoublePosition<T>* temp;
		do{
			if ( i == 1) {
				cout << "Ingrese el contenido de el campo "<< i <<" : ";
				cin >> campo;
				this->content->previous = NULL;
				this->content->content = campo;
				if (in_ext == 1){			
					this->content->next = NULL;
					break;
				}else{
					this->content->next = new DoublePosition<T>();
					loop = this->content->next;
					loop->previous = this->content;
				}
			} else {
				cout << "Ingrese el contenido de el campo "<< i <<" : ";
				cin >> campo;
				loop->content = campo;
				if (i==in_ext){			
					loop->next = NULL;
					break;
				}else{ 
					temp = loop;
					loop->next = new DoublePosition<T>();
					loop = loop->next;
					loop->previous = temp;
				}
			}
			i += 1;
		}while ( loop != NULL);
	};
	DoubleLinkedList(T i){
		this->content->content = i;
		this->content->previous = NULL;
		this->content->next = NULL;
	};
	~DoubleLinkedList(){
		this->emptyList();
		this->content->previous = NULL;
		this->content->next = NULL;
		this->content = NULL;
	};
	DoubleLinkedList(const DoubleLinkedList &cpy){
		DoublePosition<T>* loop = this->content;
		DoublePosition<T>* temp_1 = cpy->content;
		cpy->content = loop;
		temp1 = cpy->content;
		while (loop =! NULL){
			temp_1->next = loop->next;
			temp_1->previous = loop->previous:
			temp_1->content = loop->content; 
			temp_1 = loop->next;
			loop = loop->next;
		}
	};

	void exchange(int i, int j){
		int k = 0, m;
		SinglePosition<T>* loop = this->content;
		SinglePosition<T>* temp_1;
		SinglePosition<T>* temp_2;
		while ( loop != NULL){			
			if( k == i){
				temp_1 = loop;
				m = k;
			}
			if ( k == j){
				temp_2 = loop;
				loop->content = temp_1->content;
			}
			loop = loop->next;
			k+=1;
		}
		loop = this->content;
		while ( loop != NULL){
			if( k == m){
				loop->content = temp_2->content;
				m = k;
			}
			k+=1;
		}
	}

	int counterList(){
		int i = 0;
		SinglePosition<T>* loop = this->content;
		while(loop != NULL){
			loop = loop->next;
			i += 1;
		}
		return i;	
	}

	void emptyList(){
		int i = 0;
		SinglePosition<T>* loop = this->content;
		while(loop != NULL){
			loop->content = 0;
			loop = loop->next;
			i += 1;
		}
	}

	void ListInsert(T n, int i){
		int j = 0;
		SinglePosition<T>* loop = this->content;
		SinglePosition<T>* temp_1;
		while(loop!=NULL){
			if (j == i){
				loop->next = new SinglePosition<int>(n;
				loop->next->content = n;
				loop->next->next = temp_1->next;
			}
			loop = loop->next;
			temp_1 = loop;
			j += 1;
		}
	}

	void ListInsert(T n){
		int j = 0;
		SinglePosition<T>* loop = this->content;
		while(loop!=NULL){
			if (j == this->counterList()){
				loop->next = new SinglePosition<int>();
				loop->next->content = n;
				loop->next->next = NULL;
			}
			loop = loop->next;
			j += 1;
		}
	}
	void ListDelete(T n ,int i){
		int j = 0;
		SinglePosition<T>* loop = this->content;
		SinglePosition<T>* temp_1;
		SinglePosition<T>* temp_2;
		while(loop!=NULL){
			if (j == this->counterList()){
				if ( this->get(i) == n){
					temp_1->next = temp_2->next;
					loop = NULL;
					break;
				}
			}
			temp_1 = loop;
			loop = loop->next;
			temp_2 = loop;
			j += 1;
		}
	}
	void ListDelete(T n){
		int j = 0;
		SinglePosition<T>* loop = this->content;
		while(loop!=NULL){
			if (j == this->counterList()){
				if ( this->get(j) == n){
					loop = NULL;
					break;
				}
			}
			j += 1;
		}
	}

	T get(int i){
		int j = 0;
		SinglePosition<T>* loop = this->content;
		while(loop != NULL){
			if (j = i){
				return loop->content;
			};
			loop = loop->next;
			j += 1;
		}
	}
	int find(T n){
		int i = 0;
		SinglePosition<T>* loop = this->content;
		while(loop != NULL){
			if (loop->content = n){
				return i;
			};
			loop = loop->next;
			i += 1;
		}
	}

	T next(int i){
		int j = 0;
		SinglePosition<T>* loop = this->content;
		while(loop != NULL){
			if (j = i+1){
				return loop->content;
			}
			loop = loop->next;
			j += 1;
		}
	}
	T previous(int i){
		int j = 0;
		SinglePosition<T>* loop = this->content;
		while(loop != NULL){
			if (j = i-1){
				return loop->content;
			};
			loop = loop->next;
			j += 1;
		}
	}

	int myr(){
		SinglePosition<int>* loop = this->content;
		int mayor = this->content->content;
		while(loop != NULL){
			if (mayor<loop->next->content){
				mayor = loop->next->content;
			}
			loop = loop->next;
		}
		return mayor;
	};


	int min(){
		SinglePosition<int>* loop = this->content;
		int minor = this->content->content;
		while(loop != NULL){
			if (minor>loop->next->content){
				minor = loop->next->content;
			}
			loop = loop->next;
		}
		return minor;
	};


	T rand(){
		random_device dev;
		mt19937 rng(dev());
		uniform_int_distribution<mt19937::result_type> dist6(0,this->counterList());
		int j = 0;
		SinglePosition<T>* loop = this->content;
		while(loop != NULL){
			if (j = dist6(rng)){
				return loop->content;
			};
			loop = loop->next;
			j += 1;
		}
	};

	T rand(int i, int j) {
		random_device dev;
		mt19937 rng(dev());
		uniform_int_distribution<mt19937::result_type> dist6(i,(j%this->counterList()+1));
		int j = 0;
		SinglePosition<T>* loop = this->content;
		while(loop != NULL){
			if (j = dist6(rng)){
				return loop->content;
			};
			loop = loop->next;
			j += 1;
		}
	};
	
	void printList(){
		SinglePosition<T>* loop = this->content;
		cout << "[";
		int i = 1;
		while ( loop != NULL){
			cout << loop->content;
			if ( i == this->counterList()){
				break;		
			}else {
				cout << ",";
			}
			loop = loop->next;
			i += 1;
		}
		cout << "]" << endl;
	
	}
	SingleLinkedList(){
		int i = 1, in_ext;
		T campo;
		this->content = new SinglePosition<T>;
		cout << "Ingrese la extensiÃ³n de la lista simple enlazada: ";
		cin >> in_ext;
		SinglePosition<T>* loop;
		do{
			if ( i == 1) {
				cout << "Ingrese el contenido de el campo "<< i <<" : ";
				cin >> campo;
				this->content->content = campo;
				if (in_ext == 1){			
					this->content->next = NULL;
					break;
				}else{
					this->content->next = new SinglePosition<T>();
					loop = this->content->next;
				}
			} else {
				cout << "Ingrese el contenido de el campo "<< i <<" : ";
				cin >> campo;
				loop->content = campo;
				if (i==in_ext){			
					loop->next = NULL;
					break;
				}else{
					loop->next = new SinglePosition<T>();
					loop = loop->next;
				}
			}
			i += 1;
		}while ( loop != NULL);
	};
	SingleLinkedList(T i){
		this->content->content = i;
		this->content->next = NULL;
	};
	~SingleLinkedList(){
		this->emptyList();
		this->content->next = NULL;
		this->content = NULL;
	};
	SingleLinkedList(const SingleLinkedList &cpy){
		SinglePosition<T>* loop = this->content;
		SinglePosition<T>* temp_1 = cpy->content;
		temp_1 = loop;
		while (loop =! NULL){
			temp_1->content = loop->content;
			temp_1->next = loop->next;
			loop = loop->next;
			temp_1 = temp_1->next;
		}
	};